{"version":3,"sources":["img/icon.png","videos/vid1.mp4","videos/vid2.mp4","videos/vid3.mp4","components/Header/Header.js","components/Footer/Footer.js","components/Video/Video.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","channel","song","likes","comment","shares","Button","style","color","Favorite","Comment","Send","Video","url","useState","isVideoPlaying","setisVideoPlaying","vidRef","useRef","useEffect","scroll","document","getElementById","addEventListener","current","pause","onClick","play","ref","src","loop","App","data","Vid1","Vid2","Vid3","alt","Logo","id","map","list","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gRCO5B,SAASC,IACtB,OACE,yBAAKC,UAAU,gBACb,kBAAC,IAAD,MACA,oCACA,kBAAC,IAAD,O,0CCJS,SAASC,EAAT,GAA4D,IAA1CC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,cACb,4BACGE,EADH,OACgBC,EADhB,IAEE,kBAACI,EAAA,EAAD,KACE,wBAAIC,MAAO,CAAEC,MAAO,UAApB,aAKN,yBAAKT,UAAU,kBACb,yBAAKA,UAAU,YACb,kBAACU,EAAA,EAAD,MACCN,GAGH,yBAAKJ,UAAU,YACb,kBAACW,EAAA,EAAD,MACCN,GAGH,yBAAKL,UAAU,YACb,kBAACY,EAAA,EAAD,MACCN,K,MCxBI,SAASO,EAAT,GAAgE,IAA/CX,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,KAAMW,EAA+B,EAA/BA,IAAKV,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAAU,EAChCS,oBAAS,GADuB,mBACrEC,EADqE,KACrDC,EADqD,KAGtEC,EAASC,mBAsBf,OAVAC,qBAAU,WACR,IAAMC,EAASC,SAASC,eAAe,mBAEnCF,GACFA,EAAOG,iBAAiB,UAAU,WAChCN,EAAOO,QAAQC,aAGlB,IAGD,yBAAK1B,UAAU,eACb,kBAAC,EAAD,MACA,2BACE2B,QAxBe,WACfX,GACFE,EAAOO,QAAQC,QACfT,GAAkB,KAElBC,EAAOO,QAAQG,OACfX,GAAkB,KAmBhBjB,UAAU,eACV6B,IAAKX,EACLY,IAAKhB,EACLiB,MAAI,IAEN,kBAAC,EAAD,CACE7B,QAASA,EACTC,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,OAAQA,K,8ECrCD,SAAS0B,IACtB,IAAMC,EAAO,CACX,CACE/B,QAAS,MACTC,KAAM,SACNW,IAAKoB,IACL9B,MAAO,KACPC,QAAS,IACTC,OAAQ,MAEV,CACEJ,QAAS,MACTC,KAAM,SACNW,IAAKqB,IACL/B,MAAO,IACPC,QAAS,KACTC,OAAQ,MAEV,CACEJ,QAAS,MACTC,KAAM,SACNW,IAAKsB,IACLhC,MAAO,KACPC,QAAS,KACTC,OAAQ,OAIZ,OACE,yBAAKN,UAAU,OACb,gCACE,yBAAKA,UAAU,QACb,yBAAKqC,IAAI,OAAOP,IAAKQ,IAAMtC,UAAU,gBAEvC,oCAGA,yBAAKA,UAAU,kBAAkBuC,GAAG,mBAGjCN,EAAKO,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLxC,QAASuC,EAAKvC,QACdC,KAAMsC,EAAKtC,KACXW,IAAK2B,EAAK3B,IACVV,MAAOqC,EAAKrC,MACZC,QAASoC,EAAKpC,QACdC,OAAQmC,EAAKnC,eChDPsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcdec968.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.bb817349.png\";","module.exports = __webpack_public_path__ + \"static/media/vid1.ad2f460f.mp4\";","module.exports = __webpack_public_path__ + \"static/media/vid2.a9705369.mp4\";","module.exports = __webpack_public_path__ + \"static/media/vid3.b905646e.mp4\";","import React from \"react\";\r\n\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\r\n\r\nimport \"./Header.css\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"video-header\">\r\n      <ArrowBackIosIcon />\r\n      <h3>Reel</h3>\r\n      <CameraAltIcon />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { Favorite, Comment, Send } from \"@material-ui/icons\";\r\n\r\nimport \"./Footer.css\";\r\n\r\nexport default function Footer({ channel, song, likes, comment, shares }) {\r\n  return (\r\n    <div className=\"video-footer\">\r\n      <div className=\"video-text\">\r\n        <h3>\r\n          {channel} . ({song})\r\n          <Button>\r\n            <h4 style={{ color: \"white\" }}>Follow</h4>\r\n          </Button>\r\n        </h3>\r\n      </div>\r\n      {/*  */}\r\n      <div className=\"footer-buttons\">\r\n        <div className=\"flex-box\">\r\n          <Favorite />\r\n          {likes}\r\n        </div>\r\n        {/*  */}\r\n        <div className=\"flex-box\">\r\n          <Comment />\r\n          {comment}\r\n        </div>\r\n        {/*  */}\r\n        <div className=\"flex-box\">\r\n          <Send />\r\n          {shares}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\n// import components\r\nimport Header from \"../Header/Header\";\r\n\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nimport \"./Video.css\";\r\n\r\nexport default function Video({ channel, song, url, likes, comment, shares }) {\r\n  const [isVideoPlaying, setisVideoPlaying] = useState(false);\r\n\r\n  const vidRef = useRef();\r\n\r\n  const onVideoClick = () => {\r\n    if (isVideoPlaying) {\r\n      vidRef.current.pause();\r\n      setisVideoPlaying(false);\r\n    } else {\r\n      vidRef.current.play();\r\n      setisVideoPlaying(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const scroll = document.getElementById(\"video-container\");\r\n\r\n    if (scroll) {\r\n      scroll.addEventListener(\"scroll\", () => {\r\n        vidRef.current.pause();\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"video-cards\">\r\n      <Header />\r\n      <video\r\n        onClick={onVideoClick}\r\n        className=\"video-player\"\r\n        ref={vidRef}\r\n        src={url}\r\n        loop\r\n      />\r\n      <Footer\r\n        channel={channel}\r\n        song={song}\r\n        likes={likes}\r\n        comment={comment}\r\n        shares={shares}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport Video from \"./components/Video/Video\";\n\nimport Logo from \"./img/icon.png\";\n\nimport Vid1 from \"./videos/vid1.mp4\";\nimport Vid2 from \"./videos/vid2.mp4\";\nimport Vid3 from \"./videos/vid3.mp4\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  const data = [\n    {\n      channel: \"aaa\",\n      song: \"song-1\",\n      url: Vid1,\n      likes: \"32\",\n      comment: \"2\",\n      shares: \"23\",\n    },\n    {\n      channel: \"bbb\",\n      song: \"song-2\",\n      url: Vid2,\n      likes: \"3\",\n      comment: \"22\",\n      shares: \"23\",\n    },\n    {\n      channel: \"ccc\",\n      song: \"song-3\",\n      url: Vid3,\n      likes: \"89\",\n      comment: \"23\",\n      shares: \"29\",\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <center>\n        <div className=\"logo\">\n          <img alt=\"logo\" src={Logo} className=\"insta-logo\" />\n        </div>\n        <h3>Reel</h3>\n        {/*  */}\n\n        <div className=\"video-container\" id=\"video-container\">\n          {/*  */}\n\n          {data.map((list, i) => (\n            <Video\n              key={i}\n              channel={list.channel}\n              song={list.song}\n              url={list.url}\n              likes={list.likes}\n              comment={list.comment}\n              shares={list.shares}\n            />\n          ))}\n\n          {/*  */}\n        </div>\n      </center>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}